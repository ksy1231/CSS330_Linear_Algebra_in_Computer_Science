>>> 
 RESTART: G:\My Drive\Classes\CSS330\ClassUse\0.ClassPlans\11-16-ClassExercise\Kelvin-InClass-11-16.py 
A: Understanding seed and testing random
   10 random numbers without seed call : [1, 3, 1, -3, -4, 6, -4, -2, -8, -7]
   10 random numbers without seed call : [1, -3, 7, -7, -2, -4, -4, 3, -8, 5]
   10 random numbers without seed call : [-1, -5, 1, 2, 6, 1, 5, -3, -5, 4]
   10 random numbers after seed(0) call:  [4, 5, -7, 0, 7, 4, 1, 7, 3, -2]
   10 random numbers after seed(0) call:  [4, 5, -7, 0, 7, 4, 1, 7, 3, -2]
   10 random numbers after seed(0) call:  [4, 5, -7, 0, 7, 4, 1, 7, 3, -2]
Take away: after a seed() call, we reset random number generation
    Good way to get predictable/repeatable random numbres

B: Understanding assert
V1= [1, 2, 3, 4, 5]
V2= [2, 3, 4, 5, 6]
V3= [1, 2, 3]
add_last_element(v1, v1): 10
add_last_element(v1, v2): 11
!!ERROR!!: 5 != 3
  File "G:\My Drive\Classes\CSS330\ClassUse\0.ClassPlans\11-16-ClassExercise\Kelvin-InClass-11-16.py", line 64, in <module>
    print("add_last_element(v1, v3):", add_last_element(v1, v3))
  File "G:\My Drive\Classes\CSS330\ClassUse\0.ClassPlans\11-16-ClassExercise\Kelvin-InClass-11-16.py", line 31, in add_last_element
    traceback.print_stack(None, 2)
add_last_element(v1, v3): 0
Notice: traceback.print_stack prints from where the function call occured
         also, we can continue to execute after the assertion failure

C: Reading data file
    vec= [1, 1, -1, -1, -1, 1]
    mat= [[17.99, 10.38, 122.8, 1001.0, 0.1184, 0.2776, 0.3001, 0.1471, 0.2419], [20.57, 17.77, 132.9, 1326.0, 0.08474, 0.07864, 0.0869, 0.07017, 0.1812], [13.54, 14.36, 87.46, 566.3, 0.09779, 0.08129, 0.06664, 0.04781, 0.1885], [13.08, 15.71, 85.63, 520.0, 0.1075, 0.127, 0.04568, 0.0311, 0.1967], [9.504, 12.44, 60.34, 273.9, 0.1024, 0.06492, 0.02956, 0.02076, 0.1815], [15.34, 14.26, 102.5, 704.4, 0.1073, 0.2135, 0.2077, 0.09756, 0.2521]]
Notice: we can have two return values from the read_data function
>>> 
